!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.rbac=r():e.rbac=r()}(self,(function(){return(()=>{"use strict";var e={};return(()=>{var r=e;Object.defineProperty(r,"__esModule",{value:!0}),r.RBAC=void 0;var t=function(){function e(e){this.users={},this.roles={},this.debug=void 0!==e.debug&&e.debug,this.roles=e.rolesConfig.reduce((function(e,r){for(var t=0,s=r.roles;t<s.length;t++)e[s[t]]=r.permissions;return e}),{})}return e.prototype.getUserRoles=function(e){return e?this.users[e]?this.users[e]:this.generateError(e+" userId is not defined, please add a user to the RBAC using addUserRoles method"):this.generateError("userId is not defined, expected 1 arguments")},e.prototype.addUserRoles=function(e,r){if(!e||!r)return this.generateError("userId or roles is not defined, expected 2 arguments");if(0===r.length)return this.generateError("roles length is 0, expected at least 1");for(var t=0,s=r;t<s.length;t++){var n=s[t];if(!this.roles[n])return this.generateError(n+" role is not defined in initial config");this.users[e]?this.users[e].includes(n)||this.users[e].push(n):this.users[e]=[n]}},e.prototype.removeUserRoles=function(e,r){if(!e)return this.generateError("userId is not defined, expected 1 arguments");if(!this.users[e])return this.generateError(e+" userId is not defined, please add a user to the RBAC using addUserRoles method");if(r)for(var t=0,s=r;t<s.length;t++){var n=s[t],i=this.users[e].indexOf(n);i+1&&this.users[e].splice(i,1)}else delete this.users[e]},e.prototype.isAllowed=function(e,r){var t=this;if(!e||!r)return this.generateError("userId or permissionId is not defined, expected 2 arguments");var s=this.users[e];return s?s.some((function(e){return t.roles[e].includes(r)})):this.generateError(e+" userId is nor defined, please add user to the RBAC using addUserRoles method")},e.prototype.extendRole=function(e,r){if(!e||!r)return this.generateError("role or extendingRoles is not defined, expected 2 arguments");if(0===r.length)return this.generateError("extendingRoles length is 0, expected at least 1");if(!this.roles[e])return this.generateError(e+" role is not defined in the initial config");for(var t=0,s=r;t<s.length;t++){var n=s[t];if(!this.roles[n])return this.generateError(e+" role is not defined in the initial config");this.roles[e]=this.roles[e].concat(this.roles[n])}},e.prototype.middleware=function(e,r,t){if(!e||!r||!t)return r(),this.generateError("one of the incoming parameters is not defined, expected 3 arguments");this.isAllowed(e.userId,e.permissionId)?t():r()},e.prototype.generateError=function(e){return this.debug&&console.warn(e),new Error(e)},e}();r.RBAC=t,r.default=t})(),e})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,